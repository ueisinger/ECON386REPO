args("folder1", "folder2")
file.path("folder1","folder2")
?dir.create
dir.create("testdir2") file.path("testdir3")
dir.create("testdir2",file.path("testdir3"))
dir.create(file.path('testdir2','testdir3')
, recursive = TRUE)
setwd()
setwd(old.dir)
1:20
pi:10
15:1
`:`
?`:`
seq(1,20)
seq(0,10, by=0.5)
seq(5, 10, length=30)
seq(5,10, length=30)
my_seq<- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
c(0.5,-10,6)
num_vect<- c(0.5,-10,6)
c(0.5,-10,6) <- num_vect
vect.create(c(0.5,10,6))
c(0.5,-10,6)
num_vect<-c(0.5,-10,6)
num_vect <- c(0.5,-10,6)
info()
'num_vect'<- c(0.5,-10,6)
?c
num_vect<- c(0.5,55,-10,6)
tf<-c(num_vect<1)
tf<- num_vect <1
tf
num_vect >=6
my_char<-c("my"", "name"", "is"")
my_char<-c("my","name","is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "ursi")
c(my_char, ""ursi"")
my_name<- c(my_char, "ursi_eisinger")
ls(my_name)
my_name
paste(my_name, collapse = "ursi_eisinger")
paste(my_name, collapse = " ")
paste("hello", "world!", sep = " ")
paste("Hello", "world!", sep = " ")
paste("1:3", "c(X,Y,Z)")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
c(44, NA, 5, NA)
x<-c(44, NA, 5, NA)
x*3
y<-rnorm(1000)
z<-rep(NA, 1000)
my_data <- sample(c(y,z), 100)
is.na(my_data)
my_na<-is.na(my_data)
my_na
my_data ==NA
sum(my_na)
my_data
0/0
Inf-Inf
X
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[>0]
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(3,5,7)
c(3, 5, 7)
[c(3, 5, 7)]
["c(3, 5, 7)'']
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA).
vect <- c(foo=11, bar=2, norf=NA)
vect
names( arg)
args(name)
args(vect)
names(vect)
c(11, 2, NA)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
names(vect, vect2)
names("vect", "vect2")
names(vect) names(vect2)
identical(vect, vect2)
vect["bar"]
[c("foo", "bar")]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
matrix(?)
?matrix()
?matrix
my_matrix2 <- matrix 1:20, c(4,5)
my_matrix2 <- matrix("1:20", "c(4,5)")
my_matrix2 <- matrix 1:20
my_matrix2 <- my_matrix
identical("my_matrix", "my_matrix2")
dentical(my_matrix, my_matrix2)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(partients, my_matrix)
bind(patients, my_matrix)
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames("cnames")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FLASE == TURE) == FALSE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!TRUE 5 = 7
5 ! 7
!(5,7)
!TRUE
! 5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
INTS
ints
ints <- 5
ints > 5
which(ints)
which()
which(>7)
which(ints>7
)
any(ints)
any(ints < 0)
all(ints > 0)
install_course_github("swirldev", "swirl_courses", "Data_Analysis")
install_course_github("swirldev", "Data_Analysis")
install_course_github("swirldev", "swirl_courses", "Data_Analysis"0)
swril()
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
mean(c(2,6,8))
submit()
boring_function <- function(x)
submit()
x
submit()
submit()
boring_function('My first function!')
boring_function
submit()
submit()
submit()
mean(c(4,5,10))
my_mean(c(4, 5, 10))
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5).
remainder(divisor = 11,num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(c(1.4,3.6,7.9,8.8))
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x+1}, c(8,4,0))
evaluate(function(x){x+1}, c(8, 4, 0))
evaluate(function(x){x+1}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram(c("Hello", "my", "name", "is", "ursula"))
submit()
submit()
mad_libs(place="Croatia", adjective="pink", noun="skittles" )
submit()
submit()
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_color <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(mean(flag_colors))
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_colors, range)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$landmass, flags$red, summary)
tapply(flags$population, flags$landmass,summary)
ls(plants)
ls()
class(plants)
dim(planta)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head()
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(100, c(0.3,0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(1)
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size =100, prob = 0,7)
flips2 <- rbinom(1, size =100, prob = 0.7)
flips2 <- rbinom(n=100, size=1, prob=0.7)
flips2
sum(flips2)
rnorm(flips2)
?rnorm
rnorm(10)
rnorm(mean=100, sd=25)
rnorm(n,mean=100, sd=25)
rnorm(n, mean = 100, sd = 25)
rnorm(10, mean = 100, sd = 25)
rpois(flips2)
rpois(mean = 10)
rpois(size = 5, mean = 10)
?rpois
rpois(n, lambda)
rpois(n = 5, lambda = 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(POSIXct)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekday(d1)
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986, 08:24"
t3 <- strptime("October 17, 1986 08:24")
strptime(x, "October 17, 1986 08:24")
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot()
?plot
plot(x,y)
plot(cars)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab= "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab= "Stopping Distance")
plot(x = cars$speed, y = cars$dist, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
xlim = c(10, 15)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
mtcars
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
ls()
head(NHISdata)
install.packages(p, quiet = TRUE)
swirl()
library(swirl)
swirl()
install.packages(p, quiet = TRUE)
library(swirl)
swirl()
install.packages("tidyverse")
library(swirl)
swirl()
install.packages("dplyr")
swirl()
install.packages("dplyr")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:dplyr", unload=TRUE)
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
swirl()
swirl()
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("dplyr")
library(swirl)
swirl()
detach("package:datasets", unload=TRUE)
library("datasets", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("dplyr")
library(swirl)
ls()
rm(list=ls())
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tb1_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
getwd()
exit
getwd()
setwd("Desktop")
getwd()
data(airquality)
view(airquality)
View("airquality")
with(airquality, (plot (Temp, Ozone)))
with(airquality, (
plot (Temp, Ozone)
lines(loess, smooth(Temp, Ozone))
))
with(airquality, (plot (Temp, Ozone) lines(loess, smooth(Temp, Ozone))))
with(airquality, (
plot (Temp, Ozone)
lines(loess,smooth(Temp, Ozone))
))
with("airquality", (
plot (Temp, Ozone)
lines(loess,smooth(Temp, Ozone))
))
with("airquality", {
plot (Temp, Ozone)
lines(loess,smooth(Temp, Ozone))
})
with(airquality, {
plot (Temp, Ozone)
lines(loess,smooth(Temp, Ozone))
})
with(airquality, {
plot (Temp,Ozone)
lines(loess,smooth(Temp, Ozone))
})
with("airquality", {
plot (Temp,Ozone)
lines(loess,smooth(Temp, Ozone))
})
with("airquality", {
plot (Temp,Ozone)
lines(loess,smooth(Temp, Ozone))
})
with("airquality",{
plot(Temp,Ozone)
lines(loess,smooth(Temp,Ozone))
})
with(airquality,{
plot(Temp,Ozone)
lines(loess.smooth(Temp,Ozone))
})
set,seed(1234)
set.seed(1234)
x<-rnorm(100)
y<-rnorm(100)
hist(x)
hist(y)
plot(x,y)
Q<-rep(1:5, each= 20)
Q
plot(x,y, pch = 17, col=rep(1:5, each= 20))  ##create a repeating color sequence across the data, 17=triangle shape
##some plotting functions with the Lattice Plot System
library(lattice)
xyplot(y ~ x)
xyplot(y ~ x, col=rep(1:5, each= 20), pch=17)
plot(x,y, pch = 17, col=rep(1:5, each= 20))  ##create a repeating color sequence across the data, 17=triangle shape
legend("bottomright", legend = paste("Group", 1:5, col=1:5, pch=17, bty = "n"))
plot(x,y, pch = 17, col=rep(1:5, each= 20))
legend("bottomright", legend = paste("Group", 1:5, col=1:5, pch=17, bty = "n"))
legend("bottomright", legend = paste("Group", 1:5), col=1:5, pch=17, bty = "n"))
legend("bottomright", legend = paste("Group", 1:5), col=1:5, pch=17, bty = "n")
plot(x,y, pch = 17, col=rep(1:5, each= 20))
legend("bottomright", legend = paste("Group", 1:5), col=1:5, pch=17, bty = "n")
##ggplot
install.package("ggplot2")
##ggplot
install.packages("ggplot2")
library(ggplot2)
qplot(x, y col=rep(1:5, each = 20))
qplot(x, y, col=rep(1:5, each = 20))
getwd()
setwd("ECONBD386")
read.csv("subject_test.csv")
setwd("Desktop")
getwd()
setwd(desktop)
setwd("desktop")
getwd()
cd
setwd("/User/andreabohneisinger/Desktop")
